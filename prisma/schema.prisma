datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["extendedWhereUnique"]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id") @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    description   String   @default("")
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
    recipes       Recipe[]
    comments      Comment[]
    replies       ReplyComment[]
    rating        Rating[]
    follower      Follower[]
    following     Following[]
    userFollow    UserFollow[]
    @@map("users")
}

model Follower {
    id             String     @id  @default(auto()) @map("_id") @db.ObjectId
    userFollow     UserFollow?
    idString       String
    user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String     @db.ObjectId     
    @@map("followers")
}

model Following {
    id             String     @id  @default(auto()) @map("_id") @db.ObjectId
    userFollow     UserFollow?
    idString       String
    user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String     @db.ObjectId 
    @@map("followings")
}

model UserFollow {
  id              String      @id @default(auto())  @map("_id")  @db.ObjectId
  follower        Follower?   @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followerId      String?     @unique @db.ObjectId
  following        Following?   @relation(fields: [followingId], references: [id], onDelete: Cascade)
  followingId      String?     @unique @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @db.ObjectId
  
}

model VerificationToken {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
    @@map("verificationtokens")
}


model Collection {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  recipes     Recipe[]    @relation(fields: [recipeId], references: [id])
  recipeId    String[]    @db.ObjectId
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String      @db.ObjectId
  @@map("collections")
}

model Recipe {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  calorie       String?
  instructions  String[]
  categories    String[]
  bigImage      String?
  smallImage    String?
  created_at    Int
  servingTime   Int
  servingTotal  Int
  ingredients   Ingredient[]
  comments      Comment[]
  ratings       Rating[]
  owner         User?         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String?       @db.ObjectId
  collections   Collection[]  @relation(fields: [collectionId], references: [id])
  collectionId  String[]      @db.ObjectId
  @@map("recipes")
  
}

model Ingredient {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  quantity  String
  unit      String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String  @db.ObjectId
  @@map("ingredients")
}

model Comment {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  author        String
  text          String
  recipe        Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      String  @db.ObjectId
  owner         User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String  @db.ObjectId
  reply         ReplyComment[]
  created_at    Int
  @@map("comments")
}

model ReplyComment {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  author      String
  inquired    String
  text        String
  comment     Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String  @db.ObjectId
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String  @db.ObjectId
  created_at  Int
  @@map("replyComments")
}

model Rating {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  value     Int
  author    String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String  @db.ObjectId
  owner     User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String  @db.ObjectId
  @@map("ratings")
}
